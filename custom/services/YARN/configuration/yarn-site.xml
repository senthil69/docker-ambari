<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!-- Put site-specific property overrides in this file. -->

<configuration supports_final="true" xmlns:xi="http://www.w3.org/2001/XInclude">

  <!-- ResourceManager -->

  <property>
    <name>yarn.resourcemanager.hostname</name>
    <value>localhost</value>
    <description>The hostname of the RM.</description>
  </property>

  <property>
    <name>yarn.resourcemanager.resource-tracker.address</name>
    <value>localhost:8025</value>
    <description> The address of ResourceManager. </description>
  </property>

  <property>
    <name>yarn.resourcemanager.scheduler.address</name>
    <value>localhost:8030</value>
    <description>The address of the scheduler interface.</description>
  </property>

  <property>
    <name>yarn.resourcemanager.address</name>
    <value>localhost:8050</value>
    <description>
      The address of the applications manager interface in the
      RM.
    </description>
  </property>

  <property>
    <name>yarn.resourcemanager.admin.address</name>
    <value>localhost:8141</value>
    <description>The address of the RM admin interface.</description>
  </property>

  <property>
    <name>yarn.resourcemanager.scheduler.class</name>
    <value>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</value>
    <description>The class to use as the resource scheduler.</description>
  </property>

  <property>
    <name>yarn.scheduler.minimum-allocation-mb</name>
    <value>512</value>
    <description>
      The minimum allocation for every container request at the RM,
      in MBs. Memory requests lower than this won't take effect,
      and the specified value will get allocated at minimum.
    </description>
  </property>

  <property>
    <name>yarn.scheduler.maximum-allocation-mb</name>
    <value>2048</value>
    <description>
      The maximum allocation for every container request at the RM,
      in MBs. Memory requests higher than this won't take effect,
      and will get capped to this value.
    </description>
  </property>

  <property>
    <name>yarn.acl.enable</name>
    <value>false</value>
    <description> Are acls enabled. </description>
  </property>

  <property>
    <name>yarn.admin.acl</name>
    <value></value>
    <description> ACL of who can be admin of the YARN cluster. </description>
  </property>

  <!-- NodeManager -->

  <property>
    <name>yarn.nodemanager.address</name>
    <value>0.0.0.0:45454</value>
    <description>The address of the container manager in the NM.</description>
  </property>

  <property>
    <name>yarn.nodemanager.resource.memory-mb</name>
    <value>5120</value>
    <description>Amount of physical memory, in MB, that can be allocated
      for containers.</description>
  </property>

  <property>
    <name>yarn.application.classpath</name>
    <value>$HADOOP_CONF_DIR,/usr/hdp/current/hadoop-client/*,/usr/hdp/current/hadoop-client/lib/*,/usr/hdp/current/hadoop-hdfs-client/*,/usr/hdp/current/hadoop-hdfs-client/lib/*,/usr/hdp/current/hadoop-yarn-client/*,/usr/hdp/current/hadoop-yarn-client/lib/*,/etc/hadoop/conf,/usr/lib/hadoop/*,/usr/lib/hadoop/lib/*,/usr/lib/hadoop-hdfs/*,/usr/lib/hadoop-hdfs/lib/*,/usr/lib/hadoop-yarn/*,/usr/lib/hadoop-yarn/lib/*,/usr/lib/hadoop-mapreduce/*,/usr/lib/hadoop-mapreduce/lib/*</value>
    <description>Classpath for typical applications.</description>
  </property>

  <property>
    <name>yarn.nodemanager.vmem-pmem-ratio</name>
    <value>2.1</value>
    <description>Ratio between virtual memory to physical memory when
      setting memory limits for containers. Container allocations are
      expressed in terms of physical memory, and virtual memory usage
      is allowed to exceed this allocation by this ratio.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.container-executor.class</name>
    <value>org.apache.hadoop.yarn.server.nodemanager.GlusterContainerExecutor</value>
    <description>ContainerExecutor for launching containers</description>
  </property>

  <property>
    <name>yarn.nodemanager.linux-container-executor.group</name>
    <value>hadoop</value>
    <description>Unix group of the NodeManager</description>
  </property>

  <property>
    <name>yarn.nodemanager.aux-services</name>
    <value>mapreduce_shuffle</value>
    <description>Auxilliary services of NodeManager. A valid service name should only contain a-zA-Z0-9_ and can
      not start with numbers</description>
  </property>

  <property>
    <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>
    <value>org.apache.hadoop.mapred.ShuffleHandler</value>
    <description>The auxiliary service class to use </description>
  </property>

  <property>
    <name>yarn.nodemanager.log-dirs</name>
    <value>/hadoop/yarn/log</value>
    <description>
      Where to store container logs. An application's localized log directory
      will be found in ${yarn.nodemanager.log-dirs}/application_${appid}.
      Individual containers' log directories will be below this, in directories
      named container_{$contid}. Each container directory will contain the files
      stderr, stdin, and syslog generated by that container.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.local-dirs</name>
    <value>/hadoop/yarn/local</value>
    <description>
      List of directories to store localized files in. An
      application's localized file directory will be found in:
      ${yarn.nodemanager.local-dirs}/usercache/${user}/appcache/application_${appid}.
      Individual containers' work directories, called container_${contid}, will
      be subdirectories of this.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.container-monitor.interval-ms</name>
    <value>3000</value>
    <description>
      The interval, in milliseconds, for which the node manager
      waits  between two cycles of monitoring its containers' memory usage.
    </description>
  </property>

  <!--
  <property>
    <name>yarn.nodemanager.health-checker.script.path</name>
    <value>/etc/hadoop/conf/health_check_nodemanager</value>
    <description>The health check script to run.</description>
  </property>
   -->

  <property>
    <name>yarn.nodemanager.health-checker.interval-ms</name>
    <value>135000</value>
    <description>Frequency of running node health script.</description>
  </property>

  <property>
    <name>yarn.nodemanager.health-checker.script.timeout-ms</name>
    <value>60000</value>
    <description>Script time out period.</description>
  </property>

  <property>
    <name>yarn.nodemanager.log.retain-second</name>
    <value>604800</value>
    <description>
      Time in seconds to retain user logs. Only applicable if
      log aggregation is disabled.
    </description>
  </property>

  <property>
    <name>yarn.log-aggregation-enable</name>
    <value>true</value>
    <description>Whether to enable log aggregation. </description>
  </property>

  <property>
    <name>yarn.nodemanager.remote-app-log-dir</name>
    <value>/app-logs</value>
    <description>Location to aggregate logs to. </description>
  </property>

  <property>
    <name>yarn.nodemanager.remote-app-log-dir-suffix</name>
    <value>logs</value>
    <description>
      The remote log dir will be created at
      {yarn.nodemanager.remote-app-log-dir}/${user}/{thisParam}.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.log-aggregation.compression-type</name>
    <value>gz</value>
    <description>
      T-file compression types used to compress aggregated logs.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.delete.debug-delay-sec</name>
    <value>0</value>
    <description>
      Number of seconds after an application finishes before the nodemanager's
      DeletionService will delete the application's localized file directory
      and log directory.

      To diagnose Yarn application problems, set this property's value large
      enough (for example, to 600 = 10 minutes) to permit examination of these
      directories. After changing the property's value, you must restart the
      nodemanager in order for it to have an effect.

      The roots of Yarn applications' work directories is configurable with
      the yarn.nodemanager.local-dirs property (see below), and the roots
      of the Yarn applications' log directories is configurable with the
      yarn.nodemanager.log-dirs property (see also below).
    </description>
  </property>

  <property>
    <name>yarn.log-aggregation.retain-seconds</name>
    <value>2592000</value>
    <description>
      How long to keep aggregation logs before deleting them. -1 disables.
      Be careful set this too small and you will spam the name node.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.admin-env</name>
    <value>MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX</value>
    <description>
      Environment variables that should be forwarded from the NodeManager's
      environment to the container's.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.disk-health-checker.min-healthy-disks</name>
    <value>0.25</value>
    <description>
      The minimum fraction of number of disks to be healthy for the nodemanager
      to launch new containers. This correspond to both
      yarn-nodemanager.local-dirs and yarn.nodemanager.log-dirs. i.e.
      If there are less number of healthy local-dirs (or log-dirs) available,
      then new containers will not be launched on this node.
    </description>
  </property>

  <property>
    <name>yarn.resourcemanager.am.max-attempts</name>
    <value>2</value>
    <description>
      The maximum number of application attempts. It's a global
      setting for all application masters. Each application master can specify
      its individual maximum number of application attempts via the API, but the
      individual number cannot be more than the global upper bound. If it is,
      the resourcemanager will override it. The default number is set to 2, to
      allow at least one retry for AM.
    </description>
  </property>

  <property>
    <name>yarn.resourcemanager.webapp.address</name>
    <value>localhost:8088</value>
    <description>
      The address of the RM web application.
    </description>
  </property>

  <property>
    <name>yarn.nodemanager.vmem-check-enabled</name>
    <value>false</value>
    <description>
      Whether virtual memory limits will be enforced for containers.
    </description>
  </property>

  <property>
    <name>yarn.log.server.url</name>
    <value>http://localhost:19888/jobhistory/logs</value>
    <description>
      URI for the HistoryServer's log resource
    </description>
  </property>

  <property>
    <name>yarn.resourcemanager.nodes.exclude-path</name>
    <value>/etc/hadoop/conf/yarn.exclude</value>
    <description>
      Names a file that contains a list of hosts that are
      not permitted to connect to the resource manager.  The full pathname of the
      file must be specified.  If the value is empty, no hosts are
      excluded.
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.enabled</name>
    <value>true</value>
    <description>Indicate to clients whether timeline service is enabled or not.
      If enabled, clients will put entities and events to the timeline server.
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.store-class</name>
    <value>org.apache.hadoop.yarn.server.timeline.LeveldbTimelineStore</value>
    <description>
      Store class name for timeline store
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.generic-application-history.store-class</name>
    <value>org.apache.hadoop.yarn.server.applicationhistoryservice.NullApplicationHistoryStore</value>
    <description>
      Store class name for history store, defaulting to file system store
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.leveldb-timeline-store.path</name>
    <value>/mnt/glusterfs/hadoop/yarn/timeline</value>
    <description>
      Store file name for leveldb timeline store
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.webapp.address</name>
    <value>0.0.0.0:8188</value>
    <description>
      The http address of the timeline service web application.
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.webapp.https.address</name>
    <value>0.0.0.0:8190</value>
    <description>
      The http address of the timeline service web application.
    </description>
  </property>

  <property>
    <name>yarn.timeline-service.address</name>
    <value>0.0.0.0:10200</value>
    <description>
      This is default address for the timeline server to start
      the RPC server.
    </description>
  </property>
  <property>
    <description>Enable age off of timeline store data.</description>
    <name>yarn.timeline-service.ttl-enable</name>
    <value>true</value>
  </property>
  <property>
    <description>Time to live for timeline store data in milliseconds.</description>
    <name>yarn.timeline-service.ttl-ms</name>
    <value>2678400000</value>
  </property>
  <property>
    <description>Length of time to wait between deletion cycles of leveldb timeline store in milliseconds.</description>
    <name>yarn.timeline-service.leveldb-timeline-store.ttl-interval-ms</name>
    <value>300000</value>
  </property>
  
  <!-- New Stuff -->
  <property>
    <name>yarn.nodemanager.recovery.enabled</name>
    <value>false</value>
    <description>Enable the node manager to recover after starting</description>
  </property>
  <property>
    <name>yarn.nodemanager.recovery.dir</name>
    <value>/var/log/hadoop-yarn/nodemanager/recovery-state</value>
    <description>
      The local filesystem directory in which the node manager will store
      state when recovery is enabled.
    </description>
  </property>
    <property>
    <name>yarn.client.nodemanager-connect.retry-interval-ms</name>
    <value>10000</value>
    <description>Time interval between each attempt to connect to NM</description>
  </property>
  <property>
    <name>yarn.client.nodemanager-connect.max-wait-ms</name>
    <value>60000</value>
    <description>Max time to wait to establish a connection to NM</description>
  </property>
  <property>
    <name>yarn.resourcemanager.recovery.enabled</name>
    <value>false</value>
    <description>
      Enable RM to recover state after starting.
      If true, then yarn.resourcemanager.store.class must be specified.
    </description>
  </property>
  <property>
    <name>yarn.resourcemanager.work-preserving-recovery.enabled</name>
    <value>false</value>
    <description>
      Enable RM work preserving recovery. This configuration is private to YARN for experimenting the feature.
    </description>
  </property>
  <property>
    <name>yarn.resourcemanager.store.class</name>
    <value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>
    <description>
      The class to use as the persistent store.
      If org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore is used,
      the store is implicitly fenced; meaning a single ResourceManager
      is able to use the store at any point in time.
    </description>
  </property>
  <property>
    <name>yarn.resourcemanager.zk-address</name>
    <value>localhost:2181</value>
    <description>
      List Host:Port of the ZooKeeper servers to be used by the RM. comma separated host:port pairs, each corresponding to a zk server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002" If the optional chroot suffix is used the example would look like: "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a" where the client would be rooted at "/app/a" and all paths would be relative to this root - ie getting/setting/etc...  "/foo/bar" would result in operations being run on "/app/a/foo/bar" (from the server perspective).
    </description>
  </property>
  <property>
    <name>yarn.resourcemanager.zk-state-store.parent-path</name>
    <value>/rmstore</value>
    <description>Full path of the ZooKeeper znode where RM state will be stored. This must be supplied when using org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore as the value for yarn.resourcemanager.store.class</description>
  </property>
  <property>
    <name>yarn.resourcemanager.zk-acl</name>
    <value>world:anyone:rwcda </value>
    <description>ACL's to be used for ZooKeeper znodes.</description>
  </property>
  <property>
    <name>yarn.resourcemanager.work-preserving-recovery.scheduling-wait-ms</name>
    <value>10000</value>
    <description>Set the amount of time RM waits before allocating new containers on work-preserving-recovery. Such wait period gives RM a chance to settle down resyncing with NMs in the cluster on recovery, before assigning new containers to applications.</description>
  </property>
  <property>
    <name>yarn.resourcemanager.connect.retry-interval.ms</name>
    <value>30000</value>
    <description>How often to try connecting to the ResourceManager.</description>
  </property>
  <property>
    <name>yarn.resourcemanager.connect.max-wait.ms</name>
    <value>900000</value>
    <description>Maximum time to wait to establish connection to ResourceManager</description>
  </property>
  <property>
    <name>yarn.resourcemanager.zk-retry-interval-ms</name>
    <value>1000</value>
    <description>"Retry interval in milliseconds when connecting to ZooKeeper.
      When HA is enabled, the value here is NOT used. It is generated
      automatically from yarn.resourcemanager.zk-timeout-ms and
      yarn.resourcemanager.zk-num-retries."
    </description>
  </property>
  <property>
    <name>yarn.resourcemanager.zk-num-retries</name>
    <value>1000</value>
    <description>Number of times RM tries to connect to ZooKeeper.</description>
  </property>
  <property>
    <name>yarn.resourcemanager.zk-timeout-ms</name>
    <value>10000</value>
    <description>ZooKeeper session timeout in milliseconds. Session expiration is managed by the ZooKeeper cluster itself, not by the client. This value is used by the cluster to determine when the client's session expires. Expirations happens when the cluster does not hear from the client within the specified session timeout period (i.e. no heartbeat).</description>
  </property>
  <property>
    <name>yarn.resourcemanager.state-store.max-completed-applications</name>
    <value>${yarn.resourcemanager.max-completed-applications}</value>
    <description>The maximum number of completed applications RM state store keeps, less than or equals to ${yarn.resourcemanager.max-completed-applications}. By default, it equals to ${yarn.resourcemanager.max-completed-applications}. This ensures that the applications kept in the state store are consistent with the applications remembered in RM memory. Any values larger than ${yarn.resourcemanager.max-completed-applications} will be reset to ${yarn.resourcemanager.max-completed-applications}. Note that this value impacts the RM recovery performance.Typically,  a smaller value indicates better performance on RM recovery.</description>
  </property>
  <property>
    <name>yarn.resourcemanager.fs.state-store.retry-policy-spec</name>
    <value>2000, 500</value>
    <description>hdfs client retry policy specification. hdfs client retry is always enabled. Specified in pairs of sleep-time and number-of-retries and (t0, n0), (t1, n1), ..., the first n0 retries sleep t0 milliseconds on average, the following n1 retries sleep t1 milliseconds on average, and so on.</description>
  </property>
  <property>
    <name>yarn.resourcemanager.fs.state-store.uri</name>
    <value> </value>
    <description>RI pointing to the location of the FileSystem path where RM state will be stored. This must be supplied when using org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore as the value for yarn.resourcemanager.store.class </description>
  </property>
  <property>
    <name>yarn.resourcemanager.ha.enabled</name>
    <value>false</value>
    <description>enable RM HA or not</description>
  </property>
  <property>
    <name>yarn.nodemanager.linux-container-executor.resources-handler.class</name>
    <value>org.apache.hadoop.yarn.server.nodemanager.util.DefaultLCEResourcesHandler</value>
    <description>Pre-requisite to use CGroups</description>
  </property>
  <property>
    <name>yarn.nodemanager.linux-container-executor.cgroups.hierarchy</name>
    <value>hadoop-yarn</value>
    <description>Name of the Cgroups hierarchy under which all YARN jobs will be launched</description>
  </property>
  <property>
    <name>yarn.nodemanager.linux-container-executor.cgroups.mount</name>
    <value>false</value>
    <description>If true, YARN will automount the CGroup, however the directory needs to already exist; else, the cgroup should be mounted by the admin</description>
  </property>
  <property>
    <name>yarn.nodemanager.linux-container-executor.cgroups.strict-resource-usage</name>
    <value>false</value>
    <description>Strictly limit CPU resource usage to allocated usage even if spare CPU is available</description>
  </property>
  <property>
    <name>yarn.nodemanager.resource.cpu-vcores</name>
    <value>8</value>
    <description></description>
  </property>
  <property>
    <name>yarn.nodemanager.resource.percentage-physical-cpu-limit</name>
    <value>100</value>
    <description>The amount of CPU allocated for YARN containers - only effective when used with CGroups</description>
  </property>
    
</configuration>
